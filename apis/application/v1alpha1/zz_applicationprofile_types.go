/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ApplicationProfileObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type ApplicationProfileParameters struct {

	// +kubebuilder:validation:Optional
	Annotation *string `json:"annotation,omitempty" tf:"annotation,omitempty"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	NameAlias *string `json:"nameAlias,omitempty" tf:"name_alias,omitempty"`

	// +kubebuilder:validation:Optional
	Prio *string `json:"prio,omitempty" tf:"prio,omitempty"`

	// +kubebuilder:validation:Optional
	RelationFvRsApMonPol *string `json:"relationFvRsApMonPol,omitempty" tf:"relation_fv_rs_ap_mon_pol,omitempty"`

	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-jet-aci/apis/root/v1alpha1.Tenant
	// +kubebuilder:validation:Optional
	TenantDn *string `json:"tenantDn,omitempty" tf:"tenant_dn,omitempty"`

	// +kubebuilder:validation:Optional
	TenantDnRef *v1.Reference `json:"tenantDnRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	TenantDnSelector *v1.Selector `json:"tenantDnSelector,omitempty" tf:"-"`
}

// ApplicationProfileSpec defines the desired state of ApplicationProfile
type ApplicationProfileSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ApplicationProfileParameters `json:"forProvider"`
}

// ApplicationProfileStatus defines the observed state of ApplicationProfile.
type ApplicationProfileStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ApplicationProfileObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ApplicationProfile is the Schema for the ApplicationProfiles API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,acijet}
type ApplicationProfile struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ApplicationProfileSpec   `json:"spec"`
	Status            ApplicationProfileStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ApplicationProfileList contains a list of ApplicationProfiles
type ApplicationProfileList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ApplicationProfile `json:"items"`
}

// Repository type metadata.
var (
	ApplicationProfile_Kind             = "ApplicationProfile"
	ApplicationProfile_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ApplicationProfile_Kind}.String()
	ApplicationProfile_KindAPIVersion   = ApplicationProfile_Kind + "." + CRDGroupVersion.String()
	ApplicationProfile_GroupVersionKind = CRDGroupVersion.WithKind(ApplicationProfile_Kind)
)

func init() {
	SchemeBuilder.Register(&ApplicationProfile{}, &ApplicationProfileList{})
}
