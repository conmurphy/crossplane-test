/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type EsgObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type EsgParameters struct {

	// +kubebuilder:validation:Optional
	Annotation *string `json:"annotation,omitempty" tf:"annotation,omitempty"`

	// +crossplane:generate:reference:type=ApplicationProfile
	// +kubebuilder:validation:Optional
	ApplicationProfileDn *string `json:"applicationProfileDn,omitempty" tf:"application_profile_dn,omitempty"`

	// +kubebuilder:validation:Optional
	ApplicationProfileDnRef *v1.Reference `json:"applicationProfileDnRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	ApplicationProfileDnSelector *v1.Selector `json:"applicationProfileDnSelector,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Optional
	MatchT *string `json:"matchT,omitempty" tf:"match_t,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	NameAlias *string `json:"nameAlias,omitempty" tf:"name_alias,omitempty"`

	// +kubebuilder:validation:Optional
	PcEnfPref *string `json:"pcEnfPref,omitempty" tf:"pc_enf_pref,omitempty"`

	// +kubebuilder:validation:Optional
	PrefGrMemb *string `json:"prefGrMemb,omitempty" tf:"pref_gr_memb,omitempty"`

	// Create relation to vzBrCP
	// +kubebuilder:validation:Optional
	RelationFvRsCons []RelationFvRsConsParameters `json:"relationFvRsCons,omitempty" tf:"relation_fv_rs_cons,omitempty"`

	// Create relation to vzCPIf
	// +kubebuilder:validation:Optional
	RelationFvRsConsIf []RelationFvRsConsIfParameters `json:"relationFvRsConsIf,omitempty" tf:"relation_fv_rs_cons_if,omitempty"`

	// Create relation to qos:CustomPol
	// +kubebuilder:validation:Optional
	RelationFvRsCustQosPol *string `json:"relationFvRsCustQosPol,omitempty" tf:"relation_fv_rs_cust_qos_pol,omitempty"`

	// Create relation to vz:BrCP
	// +kubebuilder:validation:Optional
	RelationFvRsIntraEpg []*string `json:"relationFvRsIntraEpg,omitempty" tf:"relation_fv_rs_intra_epg,omitempty"`

	// Create relation to vz:Taboo
	// +kubebuilder:validation:Optional
	RelationFvRsProtBy []*string `json:"relationFvRsProtBy,omitempty" tf:"relation_fv_rs_prot_by,omitempty"`

	// Create relation to vzBrCP
	// +kubebuilder:validation:Optional
	RelationFvRsProv []RelationFvRsProvParameters `json:"relationFvRsProv,omitempty" tf:"relation_fv_rs_prov,omitempty"`

	// Create relation to fv:Ctx
	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-jet-aci/apis/network/v1alpha1.Vrf
	// +kubebuilder:validation:Optional
	RelationFvRsScope *string `json:"relationFvRsScope,omitempty" tf:"relation_fv_rs_scope,omitempty"`

	// +kubebuilder:validation:Optional
	RelationFvRsScopeRef *v1.Reference `json:"relationFvRsScopeRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	RelationFvRsScopeSelector *v1.Selector `json:"relationFvRsScopeSelector,omitempty" tf:"-"`

	// Create relation to fv:EPg
	// +kubebuilder:validation:Optional
	RelationFvRsSecInherited []*string `json:"relationFvRsSecInherited,omitempty" tf:"relation_fv_rs_sec_inherited,omitempty"`
}

type RelationFvRsConsIfObservation struct {
}

type RelationFvRsConsIfParameters struct {

	// +kubebuilder:validation:Optional
	Prio *string `json:"prio,omitempty" tf:"prio,omitempty"`

	// +kubebuilder:validation:Required
	TargetDn *string `json:"targetDn" tf:"target_dn,omitempty"`
}

type RelationFvRsConsObservation struct {
}

type RelationFvRsConsParameters struct {

	// +kubebuilder:validation:Optional
	Prio *string `json:"prio,omitempty" tf:"prio,omitempty"`

	// +kubebuilder:validation:Required
	TargetDn *string `json:"targetDn" tf:"target_dn,omitempty"`
}

type RelationFvRsProvObservation struct {
}

type RelationFvRsProvParameters struct {

	// +kubebuilder:validation:Optional
	MatchT *string `json:"matchT,omitempty" tf:"match_t,omitempty"`

	// +kubebuilder:validation:Optional
	Prio *string `json:"prio,omitempty" tf:"prio,omitempty"`

	// +kubebuilder:validation:Required
	TargetDn *string `json:"targetDn" tf:"target_dn,omitempty"`
}

// EsgSpec defines the desired state of Esg
type EsgSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     EsgParameters `json:"forProvider"`
}

// EsgStatus defines the observed state of Esg.
type EsgStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        EsgObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Esg is the Schema for the Esgs API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,acijet}
type Esg struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              EsgSpec   `json:"spec"`
	Status            EsgStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// EsgList contains a list of Esgs
type EsgList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Esg `json:"items"`
}

// Repository type metadata.
var (
	Esg_Kind             = "Esg"
	Esg_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Esg_Kind}.String()
	Esg_KindAPIVersion   = Esg_Kind + "." + CRDGroupVersion.String()
	Esg_GroupVersionKind = CRDGroupVersion.WithKind(Esg_Kind)
)

func init() {
	SchemeBuilder.Register(&Esg{}, &EsgList{})
}
