/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type EpgObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type EpgParameters struct {

	// +kubebuilder:validation:Optional
	Annotation *string `json:"annotation,omitempty" tf:"annotation,omitempty"`

	// +crossplane:generate:reference:type=ApplicationProfile
	// +kubebuilder:validation:Optional
	ApplicationProfileDn *string `json:"applicationProfileDn,omitempty" tf:"application_profile_dn,omitempty"`

	// +kubebuilder:validation:Optional
	ApplicationProfileDnRef *v1.Reference `json:"applicationProfileDnRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	ApplicationProfileDnSelector *v1.Selector `json:"applicationProfileDnSelector,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Optional
	ExceptionTag *string `json:"exceptionTag,omitempty" tf:"exception_tag,omitempty"`

	// +kubebuilder:validation:Optional
	FloodOnEncap *string `json:"floodOnEncap,omitempty" tf:"flood_on_encap,omitempty"`

	// +kubebuilder:validation:Optional
	FwdCtrl *string `json:"fwdCtrl,omitempty" tf:"fwd_ctrl,omitempty"`

	// +kubebuilder:validation:Optional
	HasMcastSource *string `json:"hasMcastSource,omitempty" tf:"has_mcast_source,omitempty"`

	// +kubebuilder:validation:Optional
	IsAttrBasedEpg *string `json:"isAttrBasedEpg,omitempty" tf:"is_attr_based_epg,omitempty"`

	// +kubebuilder:validation:Optional
	MatchT *string `json:"matchT,omitempty" tf:"match_t,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	NameAlias *string `json:"nameAlias,omitempty" tf:"name_alias,omitempty"`

	// +kubebuilder:validation:Optional
	PcEnfPref *string `json:"pcEnfPref,omitempty" tf:"pc_enf_pref,omitempty"`

	// +kubebuilder:validation:Optional
	PrefGrMemb *string `json:"prefGrMemb,omitempty" tf:"pref_gr_memb,omitempty"`

	// +kubebuilder:validation:Optional
	Prio *string `json:"prio,omitempty" tf:"prio,omitempty"`

	// +kubebuilder:validation:Optional
	RelationFvRsAepgMonPol *string `json:"relationFvRsAepgMonPol,omitempty" tf:"relation_fv_rs_aepg_mon_pol,omitempty"`

	// +kubebuilder:validation:Optional
	RelationFvRsBd *string `json:"relationFvRsBd,omitempty" tf:"relation_fv_rs_bd,omitempty"`

	// +kubebuilder:validation:Optional
	RelationFvRsCons []*string `json:"relationFvRsCons,omitempty" tf:"relation_fv_rs_cons,omitempty"`

	// +kubebuilder:validation:Optional
	RelationFvRsConsIf []*string `json:"relationFvRsConsIf,omitempty" tf:"relation_fv_rs_cons_if,omitempty"`

	// +kubebuilder:validation:Optional
	RelationFvRsCustQosPol *string `json:"relationFvRsCustQosPol,omitempty" tf:"relation_fv_rs_cust_qos_pol,omitempty"`

	// +kubebuilder:validation:Optional
	RelationFvRsDppPol *string `json:"relationFvRsDppPol,omitempty" tf:"relation_fv_rs_dpp_pol,omitempty"`

	// +kubebuilder:validation:Optional
	RelationFvRsFcPathAtt []*string `json:"relationFvRsFcPathAtt,omitempty" tf:"relation_fv_rs_fc_path_att,omitempty"`

	// +kubebuilder:validation:Optional
	RelationFvRsIntraEpg []*string `json:"relationFvRsIntraEpg,omitempty" tf:"relation_fv_rs_intra_epg,omitempty"`

	// +kubebuilder:validation:Optional
	RelationFvRsNodeAtt []*string `json:"relationFvRsNodeAtt,omitempty" tf:"relation_fv_rs_node_att,omitempty"`

	// +kubebuilder:validation:Optional
	RelationFvRsPathAtt []*string `json:"relationFvRsPathAtt,omitempty" tf:"relation_fv_rs_path_att,omitempty"`

	// +kubebuilder:validation:Optional
	RelationFvRsProtBy []*string `json:"relationFvRsProtBy,omitempty" tf:"relation_fv_rs_prot_by,omitempty"`

	// +kubebuilder:validation:Optional
	RelationFvRsProv []*string `json:"relationFvRsProv,omitempty" tf:"relation_fv_rs_prov,omitempty"`

	// +kubebuilder:validation:Optional
	RelationFvRsProvDef []*string `json:"relationFvRsProvDef,omitempty" tf:"relation_fv_rs_prov_def,omitempty"`

	// +kubebuilder:validation:Optional
	RelationFvRsSecInherited []*string `json:"relationFvRsSecInherited,omitempty" tf:"relation_fv_rs_sec_inherited,omitempty"`

	// +kubebuilder:validation:Optional
	RelationFvRsTrustCtrl *string `json:"relationFvRsTrustCtrl,omitempty" tf:"relation_fv_rs_trust_ctrl,omitempty"`

	// +kubebuilder:validation:Optional
	Shutdown *string `json:"shutdown,omitempty" tf:"shutdown,omitempty"`
}

// EpgSpec defines the desired state of Epg
type EpgSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     EpgParameters `json:"forProvider"`
}

// EpgStatus defines the observed state of Epg.
type EpgStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        EpgObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Epg is the Schema for the Epgs API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,acijet}
type Epg struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              EpgSpec   `json:"spec"`
	Status            EpgStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// EpgList contains a list of Epgs
type EpgList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Epg `json:"items"`
}

// Repository type metadata.
var (
	Epg_Kind             = "Epg"
	Epg_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Epg_Kind}.String()
	Epg_KindAPIVersion   = Epg_Kind + "." + CRDGroupVersion.String()
	Epg_GroupVersionKind = CRDGroupVersion.WithKind(Epg_Kind)
)

func init() {
	SchemeBuilder.Register(&Epg{}, &EpgList{})
}
