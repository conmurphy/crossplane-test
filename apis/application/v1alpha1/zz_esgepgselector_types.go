/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type EsgEpgSelectorObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type EsgEpgSelectorParameters struct {

	// +kubebuilder:validation:Optional
	Annotation *string `json:"annotation,omitempty" tf:"annotation,omitempty"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +crossplane:generate:reference:type=Esg
	// +kubebuilder:validation:Optional
	EndpointSecurityGroupDn *string `json:"endpointSecurityGroupDn,omitempty" tf:"endpoint_security_group_dn,omitempty"`

	// +kubebuilder:validation:Optional
	EndpointSecurityGroupDnRef *v1.Reference `json:"endpointSecurityGroupDnRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	EndpointSecurityGroupDnSelector *v1.Selector `json:"endpointSecurityGroupDnSelector,omitempty" tf:"-"`

	// +crossplane:generate:reference:type=Epg
	// +kubebuilder:validation:Optional
	MatchEpgDn *string `json:"matchEpgDn,omitempty" tf:"match_epg_dn,omitempty"`

	// +kubebuilder:validation:Optional
	MatchEpgDnRef *v1.Reference `json:"matchEpgDnRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	MatchEpgDnSelector *v1.Selector `json:"matchEpgDnSelector,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	NameAlias *string `json:"nameAlias,omitempty" tf:"name_alias,omitempty"`
}

// EsgEpgSelectorSpec defines the desired state of EsgEpgSelector
type EsgEpgSelectorSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     EsgEpgSelectorParameters `json:"forProvider"`
}

// EsgEpgSelectorStatus defines the observed state of EsgEpgSelector.
type EsgEpgSelectorStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        EsgEpgSelectorObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// EsgEpgSelector is the Schema for the EsgEpgSelectors API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,acijet}
type EsgEpgSelector struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              EsgEpgSelectorSpec   `json:"spec"`
	Status            EsgEpgSelectorStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// EsgEpgSelectorList contains a list of EsgEpgSelectors
type EsgEpgSelectorList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []EsgEpgSelector `json:"items"`
}

// Repository type metadata.
var (
	EsgEpgSelector_Kind             = "EsgEpgSelector"
	EsgEpgSelector_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: EsgEpgSelector_Kind}.String()
	EsgEpgSelector_KindAPIVersion   = EsgEpgSelector_Kind + "." + CRDGroupVersion.String()
	EsgEpgSelector_GroupVersionKind = CRDGroupVersion.WithKind(EsgEpgSelector_Kind)
)

func init() {
	SchemeBuilder.Register(&EsgEpgSelector{}, &EsgEpgSelectorList{})
}
