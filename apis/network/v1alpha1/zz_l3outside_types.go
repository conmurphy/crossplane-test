/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type L3OutsideObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type L3OutsideParameters struct {

	// +kubebuilder:validation:Optional
	Annotation *string `json:"annotation,omitempty" tf:"annotation,omitempty"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Optional
	EnforceRtctrl []*string `json:"enforceRtctrl,omitempty" tf:"enforce_rtctrl,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	NameAlias *string `json:"nameAlias,omitempty" tf:"name_alias,omitempty"`

	// +kubebuilder:validation:Optional
	RelationL3ExtRsDampeningPol []RelationL3ExtRsDampeningPolParameters `json:"relationL3ExtRsDampeningPol,omitempty" tf:"relation_l3ext_rs_dampening_pol,omitempty"`

	// +kubebuilder:validation:Optional
	RelationL3ExtRsEctx *string `json:"relationL3ExtRsEctx,omitempty" tf:"relation_l3ext_rs_ectx,omitempty"`

	// +kubebuilder:validation:Optional
	RelationL3ExtRsInterleakPol *string `json:"relationL3ExtRsInterleakPol,omitempty" tf:"relation_l3ext_rs_interleak_pol,omitempty"`

	// +kubebuilder:validation:Optional
	RelationL3ExtRsL3DomAtt *string `json:"relationL3ExtRsL3DomAtt,omitempty" tf:"relation_l3ext_rs_l3_dom_att,omitempty"`

	// +kubebuilder:validation:Optional
	RelationL3ExtRsOutToBdPublicSubnetHolder []*string `json:"relationL3ExtRsOutToBdPublicSubnetHolder,omitempty" tf:"relation_l3ext_rs_out_to_bd_public_subnet_holder,omitempty"`

	// +kubebuilder:validation:Optional
	TargetDscp *string `json:"targetDscp,omitempty" tf:"target_dscp,omitempty"`

	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-jet-aci/apis/root/v1alpha1.Tenant
	// +kubebuilder:validation:Optional
	TenantDn *string `json:"tenantDn,omitempty" tf:"tenant_dn,omitempty"`

	// +kubebuilder:validation:Optional
	TenantDnRef *v1.Reference `json:"tenantDnRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	TenantDnSelector *v1.Selector `json:"tenantDnSelector,omitempty" tf:"-"`
}

type RelationL3ExtRsDampeningPolObservation struct {
}

type RelationL3ExtRsDampeningPolParameters struct {

	// +kubebuilder:validation:Required
	Af *string `json:"af" tf:"af,omitempty"`

	// +kubebuilder:validation:Required
	TnRtctrlProfileName *string `json:"tnRtctrlProfileName" tf:"tn_rtctrl_profile_name,omitempty"`
}

// L3OutsideSpec defines the desired state of L3Outside
type L3OutsideSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     L3OutsideParameters `json:"forProvider"`
}

// L3OutsideStatus defines the observed state of L3Outside.
type L3OutsideStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        L3OutsideObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// L3Outside is the Schema for the L3Outsides API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,acijet}
type L3Outside struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              L3OutsideSpec   `json:"spec"`
	Status            L3OutsideStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// L3OutsideList contains a list of L3Outsides
type L3OutsideList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []L3Outside `json:"items"`
}

// Repository type metadata.
var (
	L3Outside_Kind             = "L3Outside"
	L3Outside_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: L3Outside_Kind}.String()
	L3Outside_KindAPIVersion   = L3Outside_Kind + "." + CRDGroupVersion.String()
	L3Outside_GroupVersionKind = CRDGroupVersion.WithKind(L3Outside_Kind)
)

func init() {
	SchemeBuilder.Register(&L3Outside{}, &L3OutsideList{})
}
