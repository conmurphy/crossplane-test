/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type RelationFvRsCtxToBGPCtxAfPolObservation struct {
}

type RelationFvRsCtxToBGPCtxAfPolParameters struct {

	// +kubebuilder:validation:Required
	Af *string `json:"af" tf:"af,omitempty"`

	// +kubebuilder:validation:Required
	TnBGPCtxAfPolName *string `json:"tnBgpCtxAfPolName" tf:"tn_bgp_ctx_af_pol_name,omitempty"`
}

type RelationFvRsCtxToEigrpCtxAfPolObservation struct {
}

type RelationFvRsCtxToEigrpCtxAfPolParameters struct {

	// +kubebuilder:validation:Required
	Af *string `json:"af" tf:"af,omitempty"`

	// +kubebuilder:validation:Required
	TnEigrpCtxAfPolName *string `json:"tnEigrpCtxAfPolName" tf:"tn_eigrp_ctx_af_pol_name,omitempty"`
}

type RelationFvRsCtxToOspfCtxPolObservation struct {
}

type RelationFvRsCtxToOspfCtxPolParameters struct {

	// +kubebuilder:validation:Required
	Af *string `json:"af" tf:"af,omitempty"`

	// +kubebuilder:validation:Required
	TnOspfCtxPolName *string `json:"tnOspfCtxPolName" tf:"tn_ospf_ctx_pol_name,omitempty"`
}

type VrfObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type VrfParameters struct {

	// +kubebuilder:validation:Optional
	Annotation *string `json:"annotation,omitempty" tf:"annotation,omitempty"`

	// +kubebuilder:validation:Optional
	BdEnforcedEnable *string `json:"bdEnforcedEnable,omitempty" tf:"bd_enforced_enable,omitempty"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Optional
	IPDataPlaneLearning *string `json:"ipDataPlaneLearning,omitempty" tf:"ip_data_plane_learning,omitempty"`

	// +kubebuilder:validation:Optional
	KnwMcastAct *string `json:"knwMcastAct,omitempty" tf:"knw_mcast_act,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	NameAlias *string `json:"nameAlias,omitempty" tf:"name_alias,omitempty"`

	// +kubebuilder:validation:Optional
	PcEnfDir *string `json:"pcEnfDir,omitempty" tf:"pc_enf_dir,omitempty"`

	// +kubebuilder:validation:Optional
	PcEnfPref *string `json:"pcEnfPref,omitempty" tf:"pc_enf_pref,omitempty"`

	// +kubebuilder:validation:Optional
	RelationFvRsBGPCtxPol *string `json:"relationFvRsBgpCtxPol,omitempty" tf:"relation_fv_rs_bgp_ctx_pol,omitempty"`

	// +kubebuilder:validation:Optional
	RelationFvRsCtxMcastTo []*string `json:"relationFvRsCtxMcastTo,omitempty" tf:"relation_fv_rs_ctx_mcast_to,omitempty"`

	// +kubebuilder:validation:Optional
	RelationFvRsCtxMonPol *string `json:"relationFvRsCtxMonPol,omitempty" tf:"relation_fv_rs_ctx_mon_pol,omitempty"`

	// +kubebuilder:validation:Optional
	RelationFvRsCtxToBGPCtxAfPol []RelationFvRsCtxToBGPCtxAfPolParameters `json:"relationFvRsCtxToBgpCtxAfPol,omitempty" tf:"relation_fv_rs_ctx_to_bgp_ctx_af_pol,omitempty"`

	// +kubebuilder:validation:Optional
	RelationFvRsCtxToEigrpCtxAfPol []RelationFvRsCtxToEigrpCtxAfPolParameters `json:"relationFvRsCtxToEigrpCtxAfPol,omitempty" tf:"relation_fv_rs_ctx_to_eigrp_ctx_af_pol,omitempty"`

	// +kubebuilder:validation:Optional
	RelationFvRsCtxToEpRet *string `json:"relationFvRsCtxToEpRet,omitempty" tf:"relation_fv_rs_ctx_to_ep_ret,omitempty"`

	// +kubebuilder:validation:Optional
	RelationFvRsCtxToExtRouteTagPol *string `json:"relationFvRsCtxToExtRouteTagPol,omitempty" tf:"relation_fv_rs_ctx_to_ext_route_tag_pol,omitempty"`

	// +kubebuilder:validation:Optional
	RelationFvRsCtxToOspfCtxPol []RelationFvRsCtxToOspfCtxPolParameters `json:"relationFvRsCtxToOspfCtxPol,omitempty" tf:"relation_fv_rs_ctx_to_ospf_ctx_pol,omitempty"`

	// +kubebuilder:validation:Optional
	RelationFvRsOspfCtxPol *string `json:"relationFvRsOspfCtxPol,omitempty" tf:"relation_fv_rs_ospf_ctx_pol,omitempty"`

	// +kubebuilder:validation:Optional
	RelationFvRsVrfValidationPol *string `json:"relationFvRsVrfValidationPol,omitempty" tf:"relation_fv_rs_vrf_validation_pol,omitempty"`

	// +kubebuilder:validation:Required
	TenantDn *string `json:"tenantDn" tf:"tenant_dn,omitempty"`
}

// VrfSpec defines the desired state of Vrf
type VrfSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     VrfParameters `json:"forProvider"`
}

// VrfStatus defines the observed state of Vrf.
type VrfStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        VrfObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Vrf is the Schema for the Vrfs API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,acijet}
type Vrf struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              VrfSpec   `json:"spec"`
	Status            VrfStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// VrfList contains a list of Vrfs
type VrfList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Vrf `json:"items"`
}

// Repository type metadata.
var (
	Vrf_Kind             = "Vrf"
	Vrf_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Vrf_Kind}.String()
	Vrf_KindAPIVersion   = Vrf_Kind + "." + CRDGroupVersion.String()
	Vrf_GroupVersionKind = CRDGroupVersion.WithKind(Vrf_Kind)
)

func init() {
	SchemeBuilder.Register(&Vrf{}, &VrfList{})
}
