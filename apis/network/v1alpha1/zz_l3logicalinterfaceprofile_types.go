/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type L3LogicalInterfaceProfileObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type L3LogicalInterfaceProfileParameters struct {

	// +kubebuilder:validation:Optional
	Annotation *string `json:"annotation,omitempty" tf:"annotation,omitempty"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +crossplane:generate:reference:type=L3LogicalNodeProfile
	// +kubebuilder:validation:Optional
	LogicalNodeProfileDn *string `json:"logicalNodeProfileDn,omitempty" tf:"logical_node_profile_dn,omitempty"`

	// +kubebuilder:validation:Optional
	LogicalNodeProfileDnRef *v1.Reference `json:"logicalNodeProfileDnRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	LogicalNodeProfileDnSelector *v1.Selector `json:"logicalNodeProfileDnSelector,omitempty" tf:"-"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	NameAlias *string `json:"nameAlias,omitempty" tf:"name_alias,omitempty"`

	// +kubebuilder:validation:Optional
	Prio *string `json:"prio,omitempty" tf:"prio,omitempty"`

	// +kubebuilder:validation:Optional
	RelationL3ExtRsArpIfPol *string `json:"relationL3ExtRsArpIfPol,omitempty" tf:"relation_l3ext_rs_arp_if_pol,omitempty"`

	// +kubebuilder:validation:Optional
	RelationL3ExtRsEgressQosDppPol *string `json:"relationL3ExtRsEgressQosDppPol,omitempty" tf:"relation_l3ext_rs_egress_qos_dpp_pol,omitempty"`

	// +kubebuilder:validation:Optional
	RelationL3ExtRsIngressQosDppPol *string `json:"relationL3ExtRsIngressQosDppPol,omitempty" tf:"relation_l3ext_rs_ingress_qos_dpp_pol,omitempty"`

	// +kubebuilder:validation:Optional
	RelationL3ExtRsLIfPCustQosPol *string `json:"relationL3ExtRsLIfPCustQosPol,omitempty" tf:"relation_l3ext_rs_l_if_p_cust_qos_pol,omitempty"`

	// +kubebuilder:validation:Optional
	RelationL3ExtRsLIfPToNetflowMonitorPol []RelationL3ExtRsLIfPToNetflowMonitorPolParameters `json:"relationL3ExtRsLIfPToNetflowMonitorPol,omitempty" tf:"relation_l3ext_rs_l_if_p_to_netflow_monitor_pol,omitempty"`

	// +kubebuilder:validation:Optional
	RelationL3ExtRsNdIfPol *string `json:"relationL3ExtRsNdIfPol,omitempty" tf:"relation_l3ext_rs_nd_if_pol,omitempty"`

	// +kubebuilder:validation:Optional
	Tag *string `json:"tag,omitempty" tf:"tag,omitempty"`
}

type RelationL3ExtRsLIfPToNetflowMonitorPolObservation struct {
}

type RelationL3ExtRsLIfPToNetflowMonitorPolParameters struct {

	// +kubebuilder:validation:Required
	FltType *string `json:"fltType" tf:"flt_type,omitempty"`

	// +kubebuilder:validation:Required
	TnNetflowMonitorPolName *string `json:"tnNetflowMonitorPolName" tf:"tn_netflow_monitor_pol_name,omitempty"`
}

// L3LogicalInterfaceProfileSpec defines the desired state of L3LogicalInterfaceProfile
type L3LogicalInterfaceProfileSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     L3LogicalInterfaceProfileParameters `json:"forProvider"`
}

// L3LogicalInterfaceProfileStatus defines the observed state of L3LogicalInterfaceProfile.
type L3LogicalInterfaceProfileStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        L3LogicalInterfaceProfileObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// L3LogicalInterfaceProfile is the Schema for the L3LogicalInterfaceProfiles API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,acijet}
type L3LogicalInterfaceProfile struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              L3LogicalInterfaceProfileSpec   `json:"spec"`
	Status            L3LogicalInterfaceProfileStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// L3LogicalInterfaceProfileList contains a list of L3LogicalInterfaceProfiles
type L3LogicalInterfaceProfileList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []L3LogicalInterfaceProfile `json:"items"`
}

// Repository type metadata.
var (
	L3LogicalInterfaceProfile_Kind             = "L3LogicalInterfaceProfile"
	L3LogicalInterfaceProfile_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: L3LogicalInterfaceProfile_Kind}.String()
	L3LogicalInterfaceProfile_KindAPIVersion   = L3LogicalInterfaceProfile_Kind + "." + CRDGroupVersion.String()
	L3LogicalInterfaceProfile_GroupVersionKind = CRDGroupVersion.WithKind(L3LogicalInterfaceProfile_Kind)
)

func init() {
	SchemeBuilder.Register(&L3LogicalInterfaceProfile{}, &L3LogicalInterfaceProfileList{})
}
