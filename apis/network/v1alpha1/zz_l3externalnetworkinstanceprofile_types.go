/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type L3ExternalNetworkInstanceProfileObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type L3ExternalNetworkInstanceProfileParameters struct {

	// +kubebuilder:validation:Optional
	Annotation *string `json:"annotation,omitempty" tf:"annotation,omitempty"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Optional
	ExceptionTag *string `json:"exceptionTag,omitempty" tf:"exception_tag,omitempty"`

	// +kubebuilder:validation:Optional
	FloodOnEncap *string `json:"floodOnEncap,omitempty" tf:"flood_on_encap,omitempty"`

	// +crossplane:generate:reference:type=L3Outside
	// +kubebuilder:validation:Optional
	L3OutsideDn *string `json:"l3OutsideDn,omitempty" tf:"l3_outside_dn,omitempty"`

	// +kubebuilder:validation:Optional
	L3OutsideDnRef *v1.Reference `json:"l3OutsideDnRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	L3OutsideDnSelector *v1.Selector `json:"l3OutsideDnSelector,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	MatchT *string `json:"matchT,omitempty" tf:"match_t,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	NameAlias *string `json:"nameAlias,omitempty" tf:"name_alias,omitempty"`

	// +kubebuilder:validation:Optional
	PrefGrMemb *string `json:"prefGrMemb,omitempty" tf:"pref_gr_memb,omitempty"`

	// +kubebuilder:validation:Optional
	Prio *string `json:"prio,omitempty" tf:"prio,omitempty"`

	// +kubebuilder:validation:Optional
	RelationFvRsCons []*string `json:"relationFvRsCons,omitempty" tf:"relation_fv_rs_cons,omitempty"`

	// +kubebuilder:validation:Optional
	RelationFvRsConsIf []*string `json:"relationFvRsConsIf,omitempty" tf:"relation_fv_rs_cons_if,omitempty"`

	// +kubebuilder:validation:Optional
	RelationFvRsCustQosPol *string `json:"relationFvRsCustQosPol,omitempty" tf:"relation_fv_rs_cust_qos_pol,omitempty"`

	// +kubebuilder:validation:Optional
	RelationFvRsIntraEpg []*string `json:"relationFvRsIntraEpg,omitempty" tf:"relation_fv_rs_intra_epg,omitempty"`

	// +kubebuilder:validation:Optional
	RelationFvRsProtBy []*string `json:"relationFvRsProtBy,omitempty" tf:"relation_fv_rs_prot_by,omitempty"`

	// +kubebuilder:validation:Optional
	RelationFvRsProv []*string `json:"relationFvRsProv,omitempty" tf:"relation_fv_rs_prov,omitempty"`

	// +kubebuilder:validation:Optional
	RelationFvRsSecInherited []*string `json:"relationFvRsSecInherited,omitempty" tf:"relation_fv_rs_sec_inherited,omitempty"`

	// +kubebuilder:validation:Optional
	RelationL3ExtRsInstPToNATMappingEpg *string `json:"relationL3ExtRsInstPToNatMappingEpg,omitempty" tf:"relation_l3ext_rs_inst_p_to_nat_mapping_epg,omitempty"`

	// +kubebuilder:validation:Optional
	RelationL3ExtRsInstPToProfile []RelationL3ExtRsInstPToProfileParameters `json:"relationL3ExtRsInstPToProfile,omitempty" tf:"relation_l3ext_rs_inst_p_to_profile,omitempty"`

	// +kubebuilder:validation:Optional
	RelationL3ExtRsL3InstPToDomP *string `json:"relationL3ExtRsL3InstPToDomP,omitempty" tf:"relation_l3ext_rs_l3_inst_p_to_dom_p,omitempty"`

	// +kubebuilder:validation:Optional
	TargetDscp *string `json:"targetDscp,omitempty" tf:"target_dscp,omitempty"`
}

type RelationL3ExtRsInstPToProfileObservation struct {
}

type RelationL3ExtRsInstPToProfileParameters struct {

	// +kubebuilder:validation:Required
	Direction *string `json:"direction" tf:"direction,omitempty"`

	// +kubebuilder:validation:Required
	TnRtctrlProfileName *string `json:"tnRtctrlProfileName" tf:"tn_rtctrl_profile_name,omitempty"`
}

// L3ExternalNetworkInstanceProfileSpec defines the desired state of L3ExternalNetworkInstanceProfile
type L3ExternalNetworkInstanceProfileSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     L3ExternalNetworkInstanceProfileParameters `json:"forProvider"`
}

// L3ExternalNetworkInstanceProfileStatus defines the observed state of L3ExternalNetworkInstanceProfile.
type L3ExternalNetworkInstanceProfileStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        L3ExternalNetworkInstanceProfileObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// L3ExternalNetworkInstanceProfile is the Schema for the L3ExternalNetworkInstanceProfiles API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,acijet}
type L3ExternalNetworkInstanceProfile struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              L3ExternalNetworkInstanceProfileSpec   `json:"spec"`
	Status            L3ExternalNetworkInstanceProfileStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// L3ExternalNetworkInstanceProfileList contains a list of L3ExternalNetworkInstanceProfiles
type L3ExternalNetworkInstanceProfileList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []L3ExternalNetworkInstanceProfile `json:"items"`
}

// Repository type metadata.
var (
	L3ExternalNetworkInstanceProfile_Kind             = "L3ExternalNetworkInstanceProfile"
	L3ExternalNetworkInstanceProfile_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: L3ExternalNetworkInstanceProfile_Kind}.String()
	L3ExternalNetworkInstanceProfile_KindAPIVersion   = L3ExternalNetworkInstanceProfile_Kind + "." + CRDGroupVersion.String()
	L3ExternalNetworkInstanceProfile_GroupVersionKind = CRDGroupVersion.WithKind(L3ExternalNetworkInstanceProfile_Kind)
)

func init() {
	SchemeBuilder.Register(&L3ExternalNetworkInstanceProfile{}, &L3ExternalNetworkInstanceProfileList{})
}
